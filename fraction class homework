




class fraction(object):
    def __init__(self,n=None,d=None):
        self.numerator = n
        self.denominator = d

    def __str__(self):
        if self.denominator == 0:
            return "undefined"
        self.reduce()
        s = 1
        if (self.numerator < 0 and self.denominator >= 0) or (self.numerator >= 0 and self.denominator < 0):
            s =-1
        w = int(abs(self.numerator) / self.denominator)
        x = abs(self.numerator) % self.denominator
        if x == 0:
            return "%d" % (s * w)
        elif w == 0:
            return "%d / %d" % (s * x , self.denominator)
        else:
            return "%d %d / %d" % (s * w , x , self.denominator)

    def reduce(self):
        s = 1
        if (self.numerator < 0 and self.denominator >= 0) or (self.numerator >= 0 and self.denominator < 0):
            s =-1
        self.numerator = abs(self.numerator)
        self.denominator = abs(self.denominator)
        w = int(self.numerator / self.denominator)
        x = self.numerator % self.denominator
        d = self.denominator
        c = x
        while c > 1:
            if (x % c) == 0 and (d % c) == 0:
                x = x / c
                d = d / c
            c = c -1

        self.numerator = s * ((w * d) + x)
        self.denominator = d

    def numerator(self,n):
        self.numerator = n 

    def denominator(self,d):
        self.denominator = d

    def __mul__(self,rhs):
        x = self.numerator * rhs.numerator
        y = self.denominator * rhs.denominator
        return fraction(x,y)

    def __add__(self,rhs):
        xa = self.numerator * rhs.denominator
        xb = rhs.numerator * self.denominator
        x = xa + xb
        y = self.denominator * rhs.denominator
        return fraction(x,y)

if __name__ == '__main__':
    a = fraction(1,5)
    b = fraction(6,9)
    c = a * b
    print(c)
    
    
    
    
    
